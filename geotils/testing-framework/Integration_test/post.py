from geotils.data_processing.post_process import PostProcessing
import numpy as np

import unittest


class TestPostProcessing(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.height = 200
        cls.width = 200
        cls.mask = np.zeros((cls.height, cls.width), dtype=np.uint8)

        x = np.arange(cls.width)
        y = np.arange(cls.height)
        X, Y = np.meshgrid(x, y)

        cls.cx = cls.width // 2
        cls.cy = cls.height // 2
        cls.r_inner = 20
        cls.r_outer = 50

        star_mask = (
            ((X - cls.cx) ** 2 + (Y - cls.cy) ** 2 <= cls.r_outer**2)
            & ((X - cls.cx) ** 2 + (Y - cls.cy) ** 2 >= cls.r_inner**2)
            & (
                (X - cls.cx) ** 2 + (Y - cls.cy) ** 2
                <= cls.r_outer**2 - 2 * (cls.r_outer - cls.r_inner) * np.abs(X - cls.cx)
            )
        )

        cls.mask[star_mask] = 1
        cls.post = PostProcessing()

    def test_extract_poly(self):
        mask2 = self.post.extract_poly(self.mask)

        self.assertEqual(
            "POLYGON ((100 50, 100 51, 99 51, 99 52, 97 52, 97 53, 96 53, 96 54, 95 54, 95 55, 93 55, 93 56, 92 56, 92 57, 91 57, 91 58, 90 58, 90 59, 89 59, 89 60, 88 60, 88 61, 87 61, 87 62, 86 62, 86 63, 85 63, 85 65, 84 65, 84 66, 83 66, 83 67, 82 67, 82 69, 81 69, 81 70, 80 70, 80 72, 79 72, 79 74, 78 74, 78 76, 77 76, 77 78, 76 78, 76 81, 75 81, 75 84, 74 84, 74 88, 73 88, 73 94, 72 94, 72 107, 73 107, 73 113, 74 113, 74 117, 75 117, 75 120, 76 120, 76 123, 77 123, 77 125, 78 125, 78 127, 79 127, 79 129, 80 129, 80 131, 81 131, 81 132, 82 132, 82 134, 83 134, 83 135, 84 135, 84 136, 85 136, 85 138, 86 138, 86 139, 87 139, 87 140, 88 140, 88 141, 89 141, 89 142, 90 142, 90 143, 91 143, 91 144, 92 144, 92 145, 93 145, 93 146, 95 146, 95 147, 96 147, 96 148, 97 148, 97 149, 99 149, 99 150, 100 150, 100 151, 101 151, 101 150, 102 150, 102 149, 104 149, 104 148, 105 148, 105 147, 106 147, 106 146, 108 146, 108 145, 109 145, 109 144, 110 144, 110 143, 111 143, 111 142, 112 142, 112 141, 113 141, 113 140, 114 140, 114 139, 115 139, 115 138, 116 138, 116 136, 117 136, 117 135, 118 135, 118 134, 119 134, 119 132, 120 132, 120 131, 121 131, 121 129, 122 129, 122 127, 123 127, 123 125, 124 125, 124 123, 125 123, 125 120, 126 120, 126 117, 127 117, 127 113, 128 113, 128 107, 129 107, 129 94, 128 94, 128 88, 127 88, 127 84, 126 84, 126 81, 125 81, 125 78, 124 78, 124 76, 123 76, 123 74, 122 74, 122 72, 121 72, 121 70, 120 70, 120 69, 119 69, 119 67, 118 67, 118 66, 117 66, 117 65, 116 65, 116 63, 115 63, 115 62, 114 62, 114 61, 113 61, 113 60, 112 60, 112 59, 111 59, 111 58, 110 58, 110 57, 109 57, 109 56, 108 56, 108 55, 106 55, 106 54, 105 54, 105 53, 104 53, 104 52, 102 52, 102 51, 101 51, 101 50, 100 50), (94 81, 107 81, 107 82, 109 82, 109 83, 111 83, 111 84, 112 84, 112 85, 114 85, 114 86, 115 86, 115 87, 116 87, 116 89, 117 89, 117 90, 118 90, 118 92, 119 92, 119 94, 120 94, 120 107, 119 107, 119 109, 118 109, 118 111, 117 111, 117 112, 116 112, 116 114, 115 114, 115 115, 114 115, 114 116, 112 116, 112 117, 111 117, 111 118, 109 118, 109 119, 107 119, 107 120, 94 120, 94 119, 92 119, 92 118, 90 118, 90 117, 89 117, 89 116, 87 116, 87 115, 86 115, 86 114, 85 114, 85 112, 84 112, 84 111, 83 111, 83 109, 82 109, 82 107, 81 107, 81 94, 82 94, 82 92, 83 92, 83 90, 84 90, 84 89, 85 89, 85 87, 86 87, 86 86, 87 86, 87 85, 89 85, 89 84, 90 84, 90 83, 92 83, 92 82, 94 82, 94 81))",
            mask2.wkt,
        )

    def test_instance_mask_to_gdf(self):
        instance_mask = np.zeros((self.height, self.width), dtype=np.uint8)

        cy1, cx1 = 50, 50
        radius1 = 30
        Y, X = np.ogrid[: self.height, : self.width]
        mask1 = (X - cx1) ** 2 + (Y - cy1) ** 2 <= radius1**2
        instance_mask[mask1] = 1

        cy2, cx2 = 150, 150
        a, b = 40, 20
        mask2 = ((X - cx2) ** 2 / a**2 + (Y - cy2) ** 2 / b**2) <= 1
        instance_mask[mask2] = 2

        gdf = self.post.instance_mask_to_gdf(instance_mask)

        self.assertEqual(
            gdf.unary_union.wkt,
            "MULTIPOLYGON (((50 21, 43 21, 43 22, 40 22, 40 23, 37 23, 37 24, 36 24, 36 25, 34 25, 34 26, 32 26, 32 27, 31 27, 31 28, 30 28, 30 29, 29 29, 29 30, 28 30, 28 31, 27 31, 27 32, 26 32, 26 34, 25 34, 25 36, 24 36, 24 37, 23 37, 23 40, 22 40, 22 43, 21 43, 21 50, 20 50, 20 51, 21 51, 21 58, 22 58, 22 61, 23 61, 23 64, 24 64, 24 65, 25 65, 25 67, 26 67, 26 69, 27 69, 27 70, 28 70, 28 71, 29 71, 29 72, 30 72, 30 73, 31 73, 31 74, 32 74, 32 75, 34 75, 34 76, 36 76, 36 77, 37 77, 37 78, 40 78, 40 79, 43 79, 43 80, 50 80, 50 81, 51 81, 51 80, 58 80, 58 79, 61 79, 61 78, 64 78, 64 77, 65 77, 65 76, 67 76, 67 75, 69 75, 69 74, 70 74, 70 73, 71 73, 71 72, 72 72, 72 71, 73 71, 73 70, 74 70, 74 69, 75 69, 75 67, 76 67, 76 65, 77 65, 77 64, 78 64, 78 61, 79 61, 79 58, 80 58, 80 51, 81 51, 81 50, 80 50, 80 43, 79 43, 79 40, 78 40, 78 37, 77 37, 77 36, 76 36, 76 34, 75 34, 75 32, 74 32, 74 31, 73 31, 73 30, 72 30, 72 29, 71 29, 71 28, 70 28, 70 27, 69 27, 69 26, 67 26, 67 25, 65 25, 65 24, 64 24, 64 23, 61 23, 61 22, 58 22, 58 21, 51 21, 51 20, 50 20, 50 21)), ((150 131, 138 131, 138 132, 133 132, 133 133, 129 133, 129 134, 126 134, 126 135, 124 135, 124 136, 122 136, 122 137, 120 137, 120 138, 118 138, 118 139, 117 139, 117 140, 116 140, 116 141, 115 141, 115 142, 114 142, 114 143, 113 143, 113 144, 112 144, 112 146, 111 146, 111 150, 110 150, 110 151, 111 151, 111 155, 112 155, 112 157, 113 157, 113 158, 114 158, 114 159, 115 159, 115 160, 116 160, 116 161, 117 161, 117 162, 118 162, 118 163, 120 163, 120 164, 122 164, 122 165, 124 165, 124 166, 126 166, 126 167, 129 167, 129 168, 133 168, 133 169, 138 169, 138 170, 150 170, 150 171, 151 171, 151 170, 163 170, 163 169, 168 169, 168 168, 172 168, 172 167, 175 167, 175 166, 177 166, 177 165, 179 165, 179 164, 181 164, 181 163, 183 163, 183 162, 184 162, 184 161, 185 161, 185 160, 186 160, 186 159, 187 159, 187 158, 188 158, 188 157, 189 157, 189 155, 190 155, 190 151, 191 151, 191 150, 190 150, 190 146, 189 146, 189 144, 188 144, 188 143, 187 143, 187 142, 186 142, 186 141, 185 141, 185 140, 184 140, 184 139, 183 139, 183 138, 181 138, 181 137, 179 137, 179 136, 177 136, 177 135, 175 135, 175 134, 172 134, 172 133, 168 133, 168 132, 163 132, 163 131, 151 131, 151 130, 150 130, 150 131)))",
        )


if __name__ == "__main__":
    unittest.main()
